@page "/questions"

@using Questions.Data
@inject QuestionsService QuestionsService
@inject NavigationManager NavManager
@inject IJSRuntime js

<h1>List Screen</h1>

<p>This component demonstrates fetching data from a service.</p>

@if (QuestionList == null)
{
  <p><em>Loading...</em></p>
}
else
{
  <div class="input-group mb-3 justify-content-right">

    <input id="filterInput" @bind="filterText" />
    <btn id="filterBtn" class="btn btn-primary" @onclick="@(async() => await FilterResults())">Filter results</btn>
  </div>
  <table class="table">
    <thead>
      <tr>
        <th> </th>
        <th> </th>
        <th>Question</th>
        <th>Published at</th>
      </tr>
    </thead>
    <tbody>
      @foreach (var question in QuestionList)
      {
        <tr>
          <td>@question.Id </td>
          <td><img src="@question.Thumb_Url" height="50" width="50" /></td>
          <td>@question.QuestionText</td>
          <td>@question.Published_At</td>
        </tr>
      }

    </tbody>
  </table>
  <nav aria-label="Page navigation">
    <ul class="pagination justify-content-center">
      <li class="btn btn-primary @((isFirstPage? "disabled" : ""))   " @onclick=@(async ()=>await NavigateToPage("previous")) href="#" disabled=@isFirstPage>Previous</li>
      <li class="page-item disabled"><a class="page-link">Page @curPage</a></li>
      <li class="btn btn-primary @((isLastPage? "disabled" : ""))" @onclick=@(async ()=>await NavigateToPage("next")) href="#" disabled=@isLastPage>Next</li>
    </ul>
  </nav>


}




@code {




  public IEnumerable<Question> QuestionList { get; set; } = new List<Question>();
  private QuestionParameters _productParameters = new QuestionParameters();

  private int questionsLimit = 10;
  string filterText = "";
  bool setFocus = false;

  #region Pagination
  bool isLastPage = false;
  bool isFirstPage = true;
  int curPage = 1;
  #endregion


  private ElementReference filterInput;

  protected override Task OnAfterRenderAsync(bool firstRender)
  {
    if (setFocus)
    {
      js.InvokeVoidAsync("focusInput", "filterInput");
    }
    return base.OnAfterRenderAsync(firstRender);
  }


  protected override async Task OnInitializedAsync()
  {
    var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
    _productParameters.Filter = "";
    if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("question_filter", out var _filter))
    {

      if (!string.IsNullOrEmpty(_filter))
      {
        setFocus = false;
        filterText = _filter;
        _productParameters.Filter = filterText;
      }
      else
      {
        setFocus = true;
        StateHasChanged();

      }

    }

    _productParameters.Limit = questionsLimit;
    _productParameters.Offset = 0;


    QuestionList = await QuestionsService.GetQuestions(_productParameters);
    isLastPage = false;

  }


  public async Task FilterResults()
  {
    _productParameters.Filter = filterText;
    QuestionList = await QuestionsService.GetQuestions(_productParameters);
    StateHasChanged();
  }

  public async Task NavigateToPage(string direction)
  {

    if (direction.Equals("previous"))
    {
      if (curPage == 1) return;

      curPage--;
      isLastPage = false;
    }
    else
    {
      if (isLastPage) return;
      curPage++; isFirstPage = false;
    }


    _productParameters.Limit = questionsLimit;
    _productParameters.Offset = curPage == 1 ? 0 : questionsLimit * (curPage - 1);

    QuestionList = await QuestionsService.GetQuestions(_productParameters);
    if (QuestionList.Count() < questionsLimit) isLastPage = true;
    if (curPage == 1) isFirstPage = true;

    StateHasChanged();
  }

}
